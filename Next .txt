#Before adding next step, I Need to add all options to one page.

Certainly, let's format the AJAX JavaScript code and the Flask route handlers with proper indentation and structure for better readability.

AJAX JavaScript code:

javascript
Copy code
document.getElementById('continue').addEventListener('click', function() {
  // Prepare the data to send
  var postData = {
    'language': selectedLanguage,
    'wordType': selectedWordType,
    'wordCount': selectedWordCount
  };

  // Create a new AJAX request
  var xhr = new XMLHttpRequest();
  xhr.open('POST', '/process_selection', true);
  xhr.setRequestHeader('Content-Type', 'application/json');

  // Define what happens on successful data submission
  xhr.onload = function() {
    if (xhr.status === 200) {
      // Process the response (if you want to update the UI based on the response)
      var response = JSON.parse(xhr.responseText);
      // Use response data to update the UI or navigate to the next page
      window.location.href = '/nextpage_with_data'; // This would be the endpoint that uses the session data
    } else {
      // Handle error
      console.error('An error occurred!');
    }
  };

  // Send the request with the data
  xhr.send(JSON.stringify(postData));
});
Flask route handlers:

python
Copy code
from flask import Flask, request, session, jsonify, render_template

app = Flask(__name__)
app.secret_key = 'your_secret_key'  # Needed for session management

@app.route('/process_selection', methods=['POST'])
def process_selection():
    data = request.json
    # Store the selections in the user session
    session['language'] = data['language']
    session['wordType'] = data['wordType']
    session['wordCount'] = data['wordCount']
    # You can process data here and send a response
    return jsonify(success=True)

@app.route('/nextpage_with_data')
def next_page_with_data():
    # Access the data stored in the session
    language = session.get('language')
    wordType = session.get('wordType')
    wordCount = session.get('wordCount')
    # Now you can pass this data to your template or use it as needed
    return render_template('next_page.html', 
                           language=language, 
                           wordType=wordType, 
                           wordCount=wordCount)
In the JavaScript code, we're making an AJAX POST request to the /process_selection route in Flask when the "Continue" button is clicked. The Flask route then saves the posted data into the session, which can be accessed later when rendering the next page, allowing us to maintain a seamless user experience without reloading the page.





